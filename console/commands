#!/usr/bin/env php
<?php
const LOGGING_START = true;

require __DIR__ . '/../init.php';

use Illuminate\Database\Capsule\Manager as DB;
use Illuminate\Support\Str;
use splitbrain\phpcli\CLI;
use splitbrain\phpcli\Options;

class Console extends CLI
{
    protected function Setup(Options $options)
    {
        $options->setHelp('VSkeleton Logging Framework');

        $options->registerOption('product:generate', 'Generate Product', null, "product_name");
        $options->registerOption('product:wipe', 'Wipe all records related to product', null, "product_id");
        $options->registerOption('key:generate', 'Generate Access Key', null, 'product_id');
        $options->registerOption('key:disable', 'Disable Access Key', null, 'key');
        $options->registerOption('db:wipe', 'Wipe All Records in the DB');
    }

    protected function main(Options $options)
    {
        if ($options->getOpt('product:generate')) {
            try {
                $repo = new ProductRepository();
                $product = $repo->Create(['name'=>$options->getArgs()['0']]);
                $this->success('Your Product is created, Id = ' . $product->id);
            } catch (Exception $ex){
                $this->error("Found a product with same name");
            }
        }
        else if ($options->getOpt('product:wipe')) {
            try {
                $repo = new ProductRepository();
                $result = $repo->Wipe($options->getArgs()[0]);
                if(!$result){
                    $this->error("Failed to delete product");
                    return;
                }
                $this->success('Product deleted');
            } catch (Exception $ex){
                ray($ex->getMessage());
                $this->error("Failed to wipe product");
            }
        }
        else if ($options->getOpt('key:generate')) {
            try {
                $key = Str::random(64);
                $salt = Str::random(16);

                $repo = new AccessTokenRepository();
                $repo->Create([
                    'key' => $key,
                    'salt' => $salt,
                    'whitelist_range' => array(),
                    'product_id' => $options->getArgs()['0']
                ]);

                $this->success('Your access key is created: ' . $key);
            } catch (Exception $ex){
                $this->error('Failed to create access key');
            }

        }
        else if ($options->getOpt('key:disable')) {
            $key = $options->getArgs()['0'];

            if (!$key) {
                $this->error('Please specify your access key to delete.');
                return;
            }

            $repo = new AccessTokenRepository();

            $token = $repo->GetAccessToken($key);

            if (!$token) {
                $this->error('Invalid Key.');
                return;
            }

            $result = $repo->Delete($token->id);

            $this->success('Access token got deleted successfully');
        }
        else if ($options->getOpt('db:wipe')) {
            try {
                DB::statement('SET FOREIGN_KEY_CHECKS=0;');

                UserLog::query()->truncate();
                AdminLog::query()->truncate();
                Product::query()->truncate();
                AccessToken::query()->truncate();

                DB::statement('SET FOREIGN_KEY_CHECKS=1;');
                $this->success('DB wiped successfully');
            } catch (Exception $x){
                DB::statement('SET FOREIGN_KEY_CHECKS=1;');
                $this->success('Failed to wipe DB');
            }



        }
        else {
            echo $options->help();
        }
    }
}

$cli = new Console();
$cli->run();